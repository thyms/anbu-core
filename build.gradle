apply plugin: "groovy"
apply plugin: "jetty"
apply plugin: "cargo"

ext {
  projectName = "anbu-core"
}

repositories {
  maven { url "https://raw.github.com/neuland/jade4j/master/releases" }
  maven { url "https://raw.github.com/neuland/spring-jade4j/master/releases" }
  mavenCentral()
  mavenLocal()
}

configurations {
  runtimeOnly
}

dependencies {
  def versionGroovy = "2.1.2"
  def versionSpock = "0.7-groovy-2.0"
  def versionLog4j = "1.2.16"
  def versionSpring = "3.2.2.RELEASE"
  def versionCglib = "2.2.2"
  def versionCargo = '1.3.3'
  def versionJacksonJaxrs = "1.9.12"
  def versionServletApiJetty = "3.0.20100224"
  def versionSpringJade4j = "0.3.2"
  def versionJade4j = "0.3.11"

  groovy "org.codehaus.groovy:groovy-all:$versionGroovy"

  testCompile "org.spockframework:spock-core:$versionSpock", {
    exclude module: "groovy-all"
  }

  compile "log4j:log4j:$versionLog4j"

  compile "org.springframework:spring-core:$versionSpring",
    "org.springframework:spring-webmvc:$versionSpring",
    "cglib:cglib-nodep:$versionCglib"

  compile "de.neuland:spring-jade4j:$versionSpringJade4j",
    "de.neuland:jade4j:$versionJade4j"

  compile "org.codehaus.jackson:jackson-jaxrs:$versionJacksonJaxrs"

  providedCompile "org.mortbay.jetty:servlet-api:$versionServletApiJetty"

  cargo "org.codehaus.cargo:cargo-core-uberjar:$versionCargo",
    "org.codehaus.cargo:cargo-ant:$versionCargo"

  runtimeOnly "org.mortbay.jetty:jetty-runner:8.1.1.v20120215"
}

war {
  archiveName = "${projectName}.war"
}

[jettyRun,jettyRunWar]*.httpPort = 8000
[jettyRun,jettyRunWar]*.contextPath = "anbu-core"

buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
  }

  dependencies {
    classpath "org.gradle.api.plugins:gradle-cargo-plugin:0.5.8"
  }
}

cargo {
  containerId = "tomcat6x"
  port = 8080

  deployable {
    file = file("anbu-core.war")
    context = "anbu-core"
  }

  remote {
    hostname = "anbu.functional01.core.dk.com"
    username = "admin"
    password = "admin123"
  }
}

task copyToLib << {
  copy {
    from configurations.runtimeOnly.copy().setTransitive(false)
    into "$buildDir/libs"
    rename { name ->
      def artifacts = configurations.runtimeOnly.resolvedConfiguration.resolvedArtifacts
      def artifact = artifacts.find { it.file.name == name }
      "${artifact.name}.${artifact.extension}"
    }
  }
}

task stage(dependsOn: ["clean", "war", "copyToLib"])
